// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-notification-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

type NotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationRepository) EXPECT() *NotificationRepository_Expecter {
	return &NotificationRepository_Expecter{mock: &_m.Mock}
}

// CountUnread provides a mock function with given fields: ctx, userID
func (_m *NotificationRepository) CountUnread(ctx context.Context, userID int64) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountUnread")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_CountUnread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUnread'
type NotificationRepository_CountUnread_Call struct {
	*mock.Call
}

// CountUnread is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *NotificationRepository_Expecter) CountUnread(ctx interface{}, userID interface{}) *NotificationRepository_CountUnread_Call {
	return &NotificationRepository_CountUnread_Call{Call: _e.mock.On("CountUnread", ctx, userID)}
}

func (_c *NotificationRepository_CountUnread_Call) Run(run func(ctx context.Context, userID int64)) *NotificationRepository_CountUnread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationRepository_CountUnread_Call) Return(_a0 int, _a1 error) *NotificationRepository_CountUnread_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_CountUnread_Call) RunAndReturn(run func(context.Context, int64) (int, error)) *NotificationRepository_CountUnread_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, notif
func (_m *NotificationRepository) Create(ctx context.Context, notif *model.Notification) (int64, error) {
	ret := _m.Called(ctx, notif)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) (int64, error)); ok {
		return rf(ctx, notif)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) int64); ok {
		r0 = rf(ctx, notif)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Notification) error); ok {
		r1 = rf(ctx, notif)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NotificationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - notif *model.Notification
func (_e *NotificationRepository_Expecter) Create(ctx interface{}, notif interface{}) *NotificationRepository_Create_Call {
	return &NotificationRepository_Create_Call{Call: _e.mock.On("Create", ctx, notif)}
}

func (_c *NotificationRepository_Create_Call) Run(run func(ctx context.Context, notif *model.Notification)) *NotificationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Notification))
	})
	return _c
}

func (_c *NotificationRepository_Create_Call) Return(_a0 int64, _a1 error) *NotificationRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Notification) (int64, error)) *NotificationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *NotificationRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NotificationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationRepository_Expecter) Delete(ctx interface{}, id interface{}) *NotificationRepository_Delete_Call {
	return &NotificationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *NotificationRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *NotificationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationRepository_Delete_Call) Return(_a0 error) *NotificationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *NotificationRepository) GetByID(ctx context.Context, id int64) (*model.Notification, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Notification, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Notification); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NotificationRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationRepository_Expecter) GetByID(ctx interface{}, id interface{}) *NotificationRepository_GetByID_Call {
	return &NotificationRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *NotificationRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *NotificationRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationRepository_GetByID_Call) Return(_a0 *model.Notification, _a1 error) *NotificationRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*model.Notification, error)) *NotificationRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function with given fields: ctx, userID, limit, offset
func (_m *NotificationRepository) ListByUser(ctx context.Context, userID int64, limit int, offset int) ([]*model.Notification, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]*model.Notification, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []*model.Notification); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type NotificationRepository_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - limit int
//   - offset int
func (_e *NotificationRepository_Expecter) ListByUser(ctx interface{}, userID interface{}, limit interface{}, offset interface{}) *NotificationRepository_ListByUser_Call {
	return &NotificationRepository_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID, limit, offset)}
}

func (_c *NotificationRepository_ListByUser_Call) Run(run func(ctx context.Context, userID int64, limit int, offset int)) *NotificationRepository_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *NotificationRepository_ListByUser_Call) Return(_a0 []*model.Notification, _a1 error) *NotificationRepository_ListByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_ListByUser_Call) RunAndReturn(run func(context.Context, int64, int, int) ([]*model.Notification, error)) *NotificationRepository_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAllAsRead provides a mock function with given fields: ctx, userID
func (_m *NotificationRepository) MarkAllAsRead(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAllAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_MarkAllAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAllAsRead'
type NotificationRepository_MarkAllAsRead_Call struct {
	*mock.Call
}

// MarkAllAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *NotificationRepository_Expecter) MarkAllAsRead(ctx interface{}, userID interface{}) *NotificationRepository_MarkAllAsRead_Call {
	return &NotificationRepository_MarkAllAsRead_Call{Call: _e.mock.On("MarkAllAsRead", ctx, userID)}
}

func (_c *NotificationRepository_MarkAllAsRead_Call) Run(run func(ctx context.Context, userID int64)) *NotificationRepository_MarkAllAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationRepository_MarkAllAsRead_Call) Return(_a0 error) *NotificationRepository_MarkAllAsRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_MarkAllAsRead_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationRepository_MarkAllAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsRead provides a mock function with given fields: ctx, id
func (_m *NotificationRepository) MarkAsRead(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_MarkAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsRead'
type NotificationRepository_MarkAsRead_Call struct {
	*mock.Call
}

// MarkAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationRepository_Expecter) MarkAsRead(ctx interface{}, id interface{}) *NotificationRepository_MarkAsRead_Call {
	return &NotificationRepository_MarkAsRead_Call{Call: _e.mock.On("MarkAsRead", ctx, id)}
}

func (_c *NotificationRepository_MarkAsRead_Call) Run(run func(ctx context.Context, id int64)) *NotificationRepository_MarkAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationRepository_MarkAsRead_Call) Return(_a0 error) *NotificationRepository_MarkAsRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_MarkAsRead_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationRepository_MarkAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
