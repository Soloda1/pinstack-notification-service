// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-notification-service/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// GetNotificationDetails provides a mock function with given fields: ctx, id
func (_m *NotificationService) GetNotificationDetails(ctx context.Context, id int64) (*model.Notification, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationDetails")
	}

	var r0 *model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Notification, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Notification); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_GetNotificationDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationDetails'
type NotificationService_GetNotificationDetails_Call struct {
	*mock.Call
}

// GetNotificationDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationService_Expecter) GetNotificationDetails(ctx interface{}, id interface{}) *NotificationService_GetNotificationDetails_Call {
	return &NotificationService_GetNotificationDetails_Call{Call: _e.mock.On("GetNotificationDetails", ctx, id)}
}

func (_c *NotificationService_GetNotificationDetails_Call) Run(run func(ctx context.Context, id int64)) *NotificationService_GetNotificationDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationService_GetNotificationDetails_Call) Return(_a0 *model.Notification, _a1 error) *NotificationService_GetNotificationDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_GetNotificationDetails_Call) RunAndReturn(run func(context.Context, int64) (*model.Notification, error)) *NotificationService_GetNotificationDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnreadCount provides a mock function with given fields: ctx, userID
func (_m *NotificationService) GetUnreadCount(ctx context.Context, userID int64) (int, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUnreadCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_GetUnreadCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnreadCount'
type NotificationService_GetUnreadCount_Call struct {
	*mock.Call
}

// GetUnreadCount is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *NotificationService_Expecter) GetUnreadCount(ctx interface{}, userID interface{}) *NotificationService_GetUnreadCount_Call {
	return &NotificationService_GetUnreadCount_Call{Call: _e.mock.On("GetUnreadCount", ctx, userID)}
}

func (_c *NotificationService_GetUnreadCount_Call) Run(run func(ctx context.Context, userID int64)) *NotificationService_GetUnreadCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationService_GetUnreadCount_Call) Return(_a0 int, _a1 error) *NotificationService_GetUnreadCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_GetUnreadCount_Call) RunAndReturn(run func(context.Context, int64) (int, error)) *NotificationService_GetUnreadCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserNotificationFeed provides a mock function with given fields: ctx, userID, limit, page
func (_m *NotificationService) GetUserNotificationFeed(ctx context.Context, userID int64, limit int, page int) ([]*model.Notification, int32, error) {
	ret := _m.Called(ctx, userID, limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotificationFeed")
	}

	var r0 []*model.Notification
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]*model.Notification, int32, error)); ok {
		return rf(ctx, userID, limit, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []*model.Notification); ok {
		r0 = rf(ctx, userID, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) int32); ok {
		r1 = rf(ctx, userID, limit, page)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int, int) error); ok {
		r2 = rf(ctx, userID, limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NotificationService_GetUserNotificationFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserNotificationFeed'
type NotificationService_GetUserNotificationFeed_Call struct {
	*mock.Call
}

// GetUserNotificationFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - limit int
//   - page int
func (_e *NotificationService_Expecter) GetUserNotificationFeed(ctx interface{}, userID interface{}, limit interface{}, page interface{}) *NotificationService_GetUserNotificationFeed_Call {
	return &NotificationService_GetUserNotificationFeed_Call{Call: _e.mock.On("GetUserNotificationFeed", ctx, userID, limit, page)}
}

func (_c *NotificationService_GetUserNotificationFeed_Call) Run(run func(ctx context.Context, userID int64, limit int, page int)) *NotificationService_GetUserNotificationFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *NotificationService_GetUserNotificationFeed_Call) Return(_a0 []*model.Notification, _a1 int32, _a2 error) *NotificationService_GetUserNotificationFeed_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NotificationService_GetUserNotificationFeed_Call) RunAndReturn(run func(context.Context, int64, int, int) ([]*model.Notification, int32, error)) *NotificationService_GetUserNotificationFeed_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAllUserNotifications provides a mock function with given fields: ctx, userID
func (_m *NotificationService) ReadAllUserNotifications(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ReadAllUserNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_ReadAllUserNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAllUserNotifications'
type NotificationService_ReadAllUserNotifications_Call struct {
	*mock.Call
}

// ReadAllUserNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *NotificationService_Expecter) ReadAllUserNotifications(ctx interface{}, userID interface{}) *NotificationService_ReadAllUserNotifications_Call {
	return &NotificationService_ReadAllUserNotifications_Call{Call: _e.mock.On("ReadAllUserNotifications", ctx, userID)}
}

func (_c *NotificationService_ReadAllUserNotifications_Call) Run(run func(ctx context.Context, userID int64)) *NotificationService_ReadAllUserNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationService_ReadAllUserNotifications_Call) Return(_a0 error) *NotificationService_ReadAllUserNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_ReadAllUserNotifications_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationService_ReadAllUserNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// ReadNotification provides a mock function with given fields: ctx, id
func (_m *NotificationService) ReadNotification(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReadNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_ReadNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadNotification'
type NotificationService_ReadNotification_Call struct {
	*mock.Call
}

// ReadNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationService_Expecter) ReadNotification(ctx interface{}, id interface{}) *NotificationService_ReadNotification_Call {
	return &NotificationService_ReadNotification_Call{Call: _e.mock.On("ReadNotification", ctx, id)}
}

func (_c *NotificationService_ReadNotification_Call) Run(run func(ctx context.Context, id int64)) *NotificationService_ReadNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationService_ReadNotification_Call) Return(_a0 error) *NotificationService_ReadNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_ReadNotification_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationService_ReadNotification_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNotification provides a mock function with given fields: ctx, id
func (_m *NotificationService) RemoveNotification(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_RemoveNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNotification'
type NotificationService_RemoveNotification_Call struct {
	*mock.Call
}

// RemoveNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *NotificationService_Expecter) RemoveNotification(ctx interface{}, id interface{}) *NotificationService_RemoveNotification_Call {
	return &NotificationService_RemoveNotification_Call{Call: _e.mock.On("RemoveNotification", ctx, id)}
}

func (_c *NotificationService_RemoveNotification_Call) Run(run func(ctx context.Context, id int64)) *NotificationService_RemoveNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *NotificationService_RemoveNotification_Call) Return(_a0 error) *NotificationService_RemoveNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_RemoveNotification_Call) RunAndReturn(run func(context.Context, int64) error) *NotificationService_RemoveNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SaveNotification provides a mock function with given fields: ctx, notification
func (_m *NotificationService) SaveNotification(ctx context.Context, notification *model.Notification) (int64, error) {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for SaveNotification")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) (int64, error)); ok {
		return rf(ctx, notification)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Notification) int64); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Notification) error); ok {
		r1 = rf(ctx, notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_SaveNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNotification'
type NotificationService_SaveNotification_Call struct {
	*mock.Call
}

// SaveNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - notification *model.Notification
func (_e *NotificationService_Expecter) SaveNotification(ctx interface{}, notification interface{}) *NotificationService_SaveNotification_Call {
	return &NotificationService_SaveNotification_Call{Call: _e.mock.On("SaveNotification", ctx, notification)}
}

func (_c *NotificationService_SaveNotification_Call) Run(run func(ctx context.Context, notification *model.Notification)) *NotificationService_SaveNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Notification))
	})
	return _c
}

func (_c *NotificationService_SaveNotification_Call) Return(_a0 int64, _a1 error) *NotificationService_SaveNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_SaveNotification_Call) RunAndReturn(run func(context.Context, *model.Notification) (int64, error)) *NotificationService_SaveNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
